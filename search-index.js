crystal_doc_search_index_callback({"repository_name":"carbon","body":"# Carbon\n\n[![API Documentation Website](https://img.shields.io/website?down_color=red&down_message=Offline&label=API%20Documentation&up_message=Online&url=https%3A%2F%2Fluckyframework.github.io%2Fcarbon%2F)](https://luckyframework.github.io/carbon)\n\nEmail library written in Crystal.\n\n![code preview](https://user-images.githubusercontent.com/22394/38457909-9f16f9fe-3a64-11e8-852c-74e31238f48b.png)\n\n## Installation\n\nAdd this to your application's `shard.yml`:\n\n```yaml\ndependencies:\n  carbon:\n    github: luckyframework/carbon\n```\n\n## Adapters\n\n- `Carbon::SendGridAdapter`- See [luckyframework/carbon_sendgrid_adapter](https://github.com/luckyframework/carbon_sendgrid_adapter).\n- `Carbon::AwsSesAdapter` - See [keizo3/carbon_aws_ses_adapter](https://github.com/keizo3/carbon_aws_ses_adapter).\n- `Carbon::SendInBlueAdapter` - See [atnos/carbon_send_in_blue_adapter](https://github.com/atnos/carbon_send_in_blue_adapter).\n- `Carbon::MailgunAdapter` - See [atnos/carbon_mailgun_adapter](https://github.com/atnos/carbon_mailgun_adapter).\n- `Carbon::SmtpAdapter` - See [oneiros/carbon_smtp_adapter](https://github.com/oneiros/carbon_smtp_adapter).\n- `Carbon::SparkPostAdapter` - See [Swiss-Crystal/carbon_sparkpost_adapter](https://github.com/Swiss-Crystal/carbon_sparkpost_adapter).\n- `Carbon::PostmarkAdapter` - See [makisu/carbon_postmark_adapter](https://github.com/makisu/carbon_postmark_adapter).\n\n## Usage\n\n### First, create a base class for your emails\n\n```crystal\nrequire \"carbon\"\n\n# You can setup defaults in this class\nabstract class BaseEmail < Carbon::Email\n  # For example, set up a default 'from' address\n  from Carbon::Address.new(\"My App Name\", \"support@myapp.com\")\n  # Use a string if you just need the email address\n  from \"support@myapp.com\"\nend\n```\n\n### Configure the mailer class\n\n```crystal\nBaseEmail.configure do |settings|\n  settings.adapter = Carbon::DevAdapter.new(print_emails: true)\nend\n```\n\n### Create a class for your email\n\n```crystal\n# Create an email class\nclass WelcomeEmail < BaseEmail\n  def initialize(@name : String, @email_address : String)\n  end\n\n  to @email_address\n  subject \"Welcome, #{@name}!\"\n  header \"My-Custom-Header\", \"header-value\"\n  reply_to \"no-reply@noreply.com\"\n  # You can also do just `text` or `html` if you don't want both\n  templates text, html\nend\n```\n\n### Create templates\n\nTemplates go in the same folder the email is in:\n\n- Text email: `<folder_email_class_is_in>/templates/<underscored_class_name>/text.ecr`\n- HTML email: `<folder_email_class_is_in>/templates/<underscored_class_name>/html.ecr`\n\nSo if your email class is in `src/my_app/emails/welcome_email.cr`, then your\ntemplates would go in `src/my_app/emails/welcome_email/text|html.ecr`.\n\n```\n# in <folder_of_email_class>/templates/welcome_email/text.ecr\n# Templates have access to instance variables and methods in the email.\nWelcome, <%= @name %>!\n```\n\n```\n# in <folder_of_email_class>/templates/welcome_email/html.ecr\n<h1>Welcome, <%= @name %>!</h1>\n```\n\nFor more information on what you can do with Embedded Crystal (ECR), see [the official Crystal documentation](https://crystal-lang.org/api/latest/ECR.html).\n\n### Deliver the email\n\n```\n# Send the email right away!\nWelcomeEmail.new(\"Kate\", \"kate@example.com\").deliver\n\n# Send the email in the background using `spawn`\nWelcomeEmail.new(\"Kate\", \"kate@example.com\").deliver_later\n```\n\n### Delay email delivery\n\nThe built-in delay uses the `deliver_later_strategy` setting set to `Carbon::SpawnStrategy`. You can create your own custom delayed strategy\nthat inherits from `Carbon::DeliverLaterStrategy` and defines a `run` method that takes a `Carbon::Email` and a block.\n\nOne example might be a job processor:\n\n```crystal\n# Define your new delayed strategy\nclass SendEmailInJobStrategy < Carbon::DeliverLaterStrategy\n\n  # `block.call` will run `deliver`, but you can call\n  # `deliver` yourself on the `email` when you need.\n  def run(email : Carbon::Email, &block)\n    EmailJob.perform_later(email)\n  end\nend\n\nclass EmailJob < JobProcessor\n  def perform(email : Carbon::Email)\n    email.deliver\n  end\nend\n\n# configure to use your new delayed strategy\nBaseEmail.configure do |settings|\n  settings.deliver_later_strategy = SendEmailInJobStrategy.new\nend\n```\n\n## Testing\n\n### Change the adapter\n\n```crystal\n# In spec/spec_helper.cr or wherever you configure your code\nBaseEmail.configure do\n  # This adapter will capture all emails in memory\n  settings.adapter = Carbon::DevAdapter.new\nend\n```\n\n### Reset emails before each spec and include expectations\n\n```crystal\n# In spec/spec_helper.cr\n\n# This gives you the `be_delivered` expectation\ninclude Carbon::Expectations\n\nSpec.before_each do\n  Carbon::DevAdapter.reset\nend\n```\n\n### Integration testing\n\n```crystal\n# Let's say we have a class that signs the user up and sends the welcome email\n# that was described at the beginning of the README\nclass SignUpUser\n  def initialize(@name : String, @email_address : String)\n  end\n\n  def run\n    sign_user_up\n    WelcomeEmail.new(name: @name, email_address: @email_address).deliver_now\n  end\nend\n\nit \"sends an email after the user signs up\" do\n  SignUpUser.new(name: \"Emily\", email_address: \"em@gmail.com\").run\n\n  # Test that this email was sent\n  WelcomeEmail.new(name: \"Emily\", email_address: \"em@gmail.com\").should be_delivered\nend\n```\n\n### Unit testing\n\nUnit testing is simple. Instantiate your email and test the fields you care about.\n\n```crystal\nit \"builds a nice welcome email\" do\n  email = WelcomeEmail.new(name: \"David\", email_address: \"david@gmail.com\")\n  # Note that recipients are converted to an array of Carbon::Address\n  # So if you use a string value for the `to` field, you'll get an array of\n  # Carbon::Address instead.\n  email.to.should eq [Carbon::Address.new(\"david@gmail.com\")]\n  email.text_body.should contain \"Welcome\"\n  email.html_body.should contain \"Welcome\"\nend\n```\n\n> Note that unit testing can be superfluous in most cases. Instead, try\n> unit testing just fields that have complex logic. The compiler will catch most\n> other issues.\n\n## Development\n\n- `shards install`\n- Make changes\n- `crystal spec`\n\n## Contributing\n\n1.  Fork it ( https://github.com/luckyframework/carbon/fork )\n2.  Create your feature branch (git checkout -b my-new-feature)\n3.  Make your changes\n4.  Run `./script/test` to run the specs, build shards, and check formatting\n5.  Commit your changes (git commit -am 'Add some feature')\n6.  Push to the branch (git push origin my-new-feature)\n7.  Create a new Pull Request\n\n## Contributors\n\n- [paulcsmith](https://github.com/paulcsmith) Paul Smith - creator, maintainer\n","program":{"html_id":"carbon/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"carbon","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"carbon/Carbon","path":"Carbon.html","kind":"module","full_name":"Carbon","name":"Carbon","abstract":false,"locations":[{"filename":"src/carbon.cr","line_number":7,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon.cr#L7"},{"filename":"src/carbon/emailable.cr","line_number":1,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/emailable.cr#L1"},{"filename":"src/carbon/version.cr","line_number":1,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/version.cr#L1"}],"repository_name":"carbon","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"0.2.1\""}],"types":[{"html_id":"carbon/Carbon/Adapter","path":"Carbon/Adapter.html","kind":"class","full_name":"Carbon::Adapter","name":"Adapter","abstract":true,"superclass":{"html_id":"carbon/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"carbon/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"carbon/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/carbon/adapter.cr","line_number":1,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/adapter.cr#L1"}],"repository_name":"carbon","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"carbon/Carbon/DevAdapter","kind":"class","full_name":"Carbon::DevAdapter","name":"DevAdapter"}],"namespace":{"html_id":"carbon/Carbon","kind":"module","full_name":"Carbon","name":"Carbon"},"instance_methods":[{"html_id":"deliver_now(email:Carbon::Email)-instance-method","name":"deliver_now","abstract":true,"args":[{"name":"email","external_name":"email","restriction":"Carbon::Email"}],"args_string":"(email : Carbon::Email)","args_html":"(email : <a href=\"../Carbon/Email.html\">Carbon::Email</a>)","location":{"filename":"src/carbon/adapter.cr","line_number":2,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/adapter.cr#L2"},"def":{"name":"deliver_now","args":[{"name":"email","external_name":"email","restriction":"Carbon::Email"}],"visibility":"Public","body":""}}]},{"html_id":"carbon/Carbon/Address","path":"Carbon/Address.html","kind":"class","full_name":"Carbon::Address","name":"Address","abstract":false,"superclass":{"html_id":"carbon/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"carbon/Carbon/Emailable","kind":"module","full_name":"Carbon::Emailable","name":"Emailable"},{"html_id":"carbon/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"carbon/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/carbon/address.cr","line_number":3,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/address.cr#L3"}],"repository_name":"carbon","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"carbon/Carbon/Emailable","kind":"module","full_name":"Carbon::Emailable","name":"Emailable"}],"namespace":{"html_id":"carbon/Carbon","kind":"module","full_name":"Carbon","name":"Carbon"},"constructors":[{"html_id":"new(name:String,address:String)-class-method","name":"new","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"address","external_name":"address","restriction":"::String"}],"args_string":"(name : String, address : String)","args_html":"(name : <a href=\"../String.html\">String</a>, address : <a href=\"../String.html\">String</a>)","location":{"filename":"src/carbon/address.cr","line_number":15,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/address.cr#L15"},"def":{"name":"new","args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"address","external_name":"address","restriction":"::String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(name, address)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(address:String)-class-method","name":"new","abstract":false,"args":[{"name":"address","external_name":"address","restriction":"::String"}],"args_string":"(address : String)","args_html":"(address : <a href=\"../String.html\">String</a>)","location":{"filename":"src/carbon/address.cr","line_number":12,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/address.cr#L12"},"def":{"name":"new","args":[{"name":"address","external_name":"address","restriction":"::String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(address)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","doc":"Returns `true` if this reference is the same as *other*. Invokes `same?`.","summary":"<p>Returns <code>true</code> if this reference is the same as <em>other</em>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","location":{"filename":"src/carbon/address.cr","line_number":7,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/address.cr#L7"},"def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if same?(other)\n  return true\nend\nif name == other.name\nelse\n  return false\nend\nif address == other.address\nelse\n  return false\nend\ntrue\n"}},{"html_id":"address:String-instance-method","name":"address","abstract":false,"location":{"filename":"src/carbon/address.cr","line_number":6,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/address.cr#L6"},"def":{"name":"address","visibility":"Public","body":"@address"}},{"html_id":"emailable:Carbon::Address-instance-method","name":"emailable","abstract":false,"location":{"filename":"src/carbon/address.cr","line_number":18,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/address.cr#L18"},"def":{"name":"emailable","return_type":"Carbon::Address","visibility":"Public","body":"self"}},{"html_id":"name:String?-instance-method","name":"name","abstract":false,"location":{"filename":"src/carbon/address.cr","line_number":6,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/address.cr#L6"},"def":{"name":"name","visibility":"Public","body":"@name"}},{"html_id":"to_s(io:IO)-instance-method","name":"to_s","doc":"Appends a short String representation of this object\nwhich includes its class name and its object address.\n\n```\nclass Person\n  def initialize(@name : String, @age : Int32)\n  end\nend\n\nPerson.new(\"John\", 32).to_s # => #<Person:0x10a199f20>\n```","summary":"<p>Appends a short String representation of this object which includes its class name and its object address.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/carbon/address.cr","line_number":22,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/address.cr#L22"},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":"IO"}],"visibility":"Public","body":"io << to_s"}},{"html_id":"to_s:String-instance-method","name":"to_s","doc":"Returns a string representation of this object.\n\nDescendants must usually **not** override this method. Instead,\nthey must override `to_s(io)`, which must append to the given\nIO object.","summary":"<p>Returns a string representation of this object.</p>","abstract":false,"location":{"filename":"src/carbon/address.cr","line_number":26,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/address.cr#L26"},"def":{"name":"to_s","return_type":"String","visibility":"Public","body":"if @name\n  \"\\\"#{@name}\\\" <#{@address}>\"\nelse\n  @address\nend"}}]},{"html_id":"carbon/Carbon/DeliverLaterStrategy","path":"Carbon/DeliverLaterStrategy.html","kind":"class","full_name":"Carbon::DeliverLaterStrategy","name":"DeliverLaterStrategy","abstract":true,"superclass":{"html_id":"carbon/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"carbon/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"carbon/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/carbon/deliver_later_strategy.cr","line_number":1,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/deliver_later_strategy.cr#L1"}],"repository_name":"carbon","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"carbon/Carbon/SpawnStrategy","kind":"class","full_name":"Carbon::SpawnStrategy","name":"SpawnStrategy"}],"namespace":{"html_id":"carbon/Carbon","kind":"module","full_name":"Carbon","name":"Carbon"},"instance_methods":[{"html_id":"run(email:Carbon::Email,&)-instance-method","name":"run","abstract":true,"args":[{"name":"email","external_name":"email","restriction":"Carbon::Email"}],"args_string":"(email : Carbon::Email, &)","args_html":"(email : <a href=\"../Carbon/Email.html\">Carbon::Email</a>, &)","location":{"filename":"src/carbon/deliver_later_strategy.cr","line_number":2,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/deliver_later_strategy.cr#L2"},"def":{"name":"run","args":[{"name":"email","external_name":"email","restriction":"Carbon::Email"}],"yields":0,"visibility":"Public","body":""}}]},{"html_id":"carbon/Carbon/DevAdapter","path":"Carbon/DevAdapter.html","kind":"class","full_name":"Carbon::DevAdapter","name":"DevAdapter","abstract":false,"superclass":{"html_id":"carbon/Carbon/Adapter","kind":"class","full_name":"Carbon::Adapter","name":"Adapter"},"ancestors":[{"html_id":"carbon/Carbon/Adapter","kind":"class","full_name":"Carbon::Adapter","name":"Adapter"},{"html_id":"carbon/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"carbon/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/carbon/adapters/dev_adapter.cr","line_number":1,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/adapters/dev_adapter.cr#L1"}],"repository_name":"carbon","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"carbon/Carbon","kind":"module","full_name":"Carbon","name":"Carbon"},"class_methods":[{"html_id":"delivered?(email):Bool-class-method","name":"delivered?","abstract":false,"args":[{"name":"email","external_name":"email","restriction":""}],"args_string":"(email) : Bool","args_html":"(email) : Bool","location":{"filename":"src/carbon/adapters/dev_adapter.cr","line_number":15,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/adapters/dev_adapter.cr#L15"},"def":{"name":"delivered?","args":[{"name":"email","external_name":"email","restriction":""}],"return_type":"Bool","visibility":"Public","body":"delivered_emails.any?(&.==(email))"}},{"html_id":"delivered_emails-class-method","name":"delivered_emails","abstract":false,"location":{"filename":"src/carbon/adapters/dev_adapter.cr","line_number":2,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/adapters/dev_adapter.cr#L2"},"def":{"name":"delivered_emails","visibility":"Public","body":"@@delivered_emails"}},{"html_id":"reset-class-method","name":"reset","abstract":false,"location":{"filename":"src/carbon/adapters/dev_adapter.cr","line_number":19,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/adapters/dev_adapter.cr#L19"},"def":{"name":"reset","visibility":"Public","body":"@@delivered_emails.clear"}}],"constructors":[{"html_id":"new(print_emails:Bool=false)-class-method","name":"new","abstract":false,"args":[{"name":"print_emails","default_value":"false","external_name":"print_emails","restriction":"::Bool"}],"args_string":"(print_emails : Bool = false)","args_html":"(print_emails : Bool = <span class=\"n\">false</span>)","location":{"filename":"src/carbon/adapters/dev_adapter.cr","line_number":4,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/adapters/dev_adapter.cr#L4"},"def":{"name":"new","args":[{"name":"print_emails","default_value":"false","external_name":"print_emails","restriction":"::Bool"}],"visibility":"Public","body":"_ = allocate\n_.initialize(print_emails)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"deliver_now(email:Carbon::Email)-instance-method","name":"deliver_now","abstract":false,"args":[{"name":"email","external_name":"email","restriction":"Carbon::Email"}],"args_string":"(email : Carbon::Email)","args_html":"(email : <a href=\"../Carbon/Email.html\">Carbon::Email</a>)","location":{"filename":"src/carbon/adapters/dev_adapter.cr","line_number":8,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/adapters/dev_adapter.cr#L8"},"def":{"name":"deliver_now","args":[{"name":"email","external_name":"email","restriction":"Carbon::Email"}],"visibility":"Public","body":"@@delivered_emails << email\nif @print_emails\n  print_email(email)\nend\n"}}]},{"html_id":"carbon/Carbon/Email","path":"Carbon/Email.html","kind":"class","full_name":"Carbon::Email","name":"Email","abstract":true,"superclass":{"html_id":"carbon/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"carbon/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"carbon/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/carbon/email.cr","line_number":3,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/email.cr#L3"}],"repository_name":"carbon","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"carbon/Carbon","kind":"module","full_name":"Carbon","name":"Carbon"},"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","doc":"Returns `true` if this reference is the same as *other*. Invokes `same?`.","summary":"<p>Returns <code>true</code> if this reference is the same as <em>other</em>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","location":{"filename":"src/carbon/email.cr","line_number":10,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/email.cr#L10"},"def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if same?(other)\n  return true\nend\nif subject == other.subject\nelse\n  return false\nend\nif from == other.from\nelse\n  return false\nend\nif to == other.to\nelse\n  return false\nend\nif cc == other.cc\nelse\n  return false\nend\nif bcc == other.bcc\nelse\n  return false\nend\nif headers == other.headers\nelse\n  return false\nend\nif text_body == other.text_body\nelse\n  return false\nend\nif html_body == other.html_body\nelse\n  return false\nend\ntrue\n"}},{"html_id":"bcc-instance-method","name":"bcc","abstract":false,"location":{"filename":"src/carbon/email.cr","line_number":16,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/email.cr#L16"},"def":{"name":"bcc","visibility":"Public","body":"[] of Carbon::Address"}},{"html_id":"cc-instance-method","name":"cc","abstract":false,"location":{"filename":"src/carbon/email.cr","line_number":12,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/email.cr#L12"},"def":{"name":"cc","visibility":"Public","body":"[] of Carbon::Address"}},{"html_id":"deliver-instance-method","name":"deliver","abstract":false,"location":{"filename":"src/carbon/email.cr","line_number":124,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/email.cr#L124"},"def":{"name":"deliver","visibility":"Public","body":"settings.adapter.deliver_now(self)"}},{"html_id":"deliver_later-instance-method","name":"deliver_later","abstract":false,"location":{"filename":"src/carbon/email.cr","line_number":128,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/email.cr#L128"},"def":{"name":"deliver_later","visibility":"Public","body":"settings.deliver_later_strategy.run(self) do\n  deliver\nend"}},{"html_id":"from:Carbon::Address-instance-method","name":"from","abstract":true,"location":{"filename":"src/carbon/email.cr","line_number":7,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/email.cr#L7"},"def":{"name":"from","return_type":"Carbon::Address","visibility":"Public","body":""}},{"html_id":"headers:Hash(String,String)-instance-method","name":"headers","abstract":false,"location":{"filename":"src/carbon/email.cr","line_number":28,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/email.cr#L28"},"def":{"name":"headers","visibility":"Public","body":"@headers"}},{"html_id":"html_body-instance-method","name":"html_body","abstract":false,"location":{"filename":"src/carbon/email.cr","line_number":24,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/email.cr#L24"},"def":{"name":"html_body","visibility":"Public","body":""}},{"html_id":"html_layout(content_io:IO)-instance-method","name":"html_layout","abstract":false,"args":[{"name":"content_io","external_name":"content_io","restriction":"IO"}],"args_string":"(content_io : IO)","args_html":"(content_io : IO)","location":{"filename":"src/carbon/email.cr","line_number":26,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/email.cr#L26"},"def":{"name":"html_layout","args":[{"name":"content_io","external_name":"content_io","restriction":"IO"}],"visibility":"Public","body":""}},{"html_id":"subject:String-instance-method","name":"subject","abstract":true,"location":{"filename":"src/carbon/email.cr","line_number":6,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/email.cr#L6"},"def":{"name":"subject","return_type":"String","visibility":"Public","body":""}},{"html_id":"text_body-instance-method","name":"text_body","abstract":false,"location":{"filename":"src/carbon/email.cr","line_number":20,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/email.cr#L20"},"def":{"name":"text_body","visibility":"Public","body":""}},{"html_id":"text_layout(content_io:IO)-instance-method","name":"text_layout","abstract":false,"args":[{"name":"content_io","external_name":"content_io","restriction":"IO"}],"args_string":"(content_io : IO)","args_html":"(content_io : IO)","location":{"filename":"src/carbon/email.cr","line_number":22,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/email.cr#L22"},"def":{"name":"text_layout","args":[{"name":"content_io","external_name":"content_io","restriction":"IO"}],"visibility":"Public","body":""}},{"html_id":"to:Array(Carbon::Address)-instance-method","name":"to","abstract":true,"location":{"filename":"src/carbon/email.cr","line_number":8,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/email.cr#L8"},"def":{"name":"to","return_type":"Array(Carbon::Address)","visibility":"Public","body":""}}],"macros":[{"html_id":"bcc(value)-macro","name":"bcc","abstract":false,"args":[{"name":"value","external_name":"value","restriction":""}],"args_string":"(value)","args_html":"(value)","location":{"filename":"src/carbon/email.cr","line_number":85,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/email.cr#L85"},"def":{"name":"bcc","args":[{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"      def bcc : Array(Carbon::Address)\n        normalize(id_or_method(\n{{ value }}\n))\n      \nend\n    \n"}},{"html_id":"cc(value)-macro","name":"cc","abstract":false,"args":[{"name":"value","external_name":"value","restriction":""}],"args_string":"(value)","args_html":"(value)","location":{"filename":"src/carbon/email.cr","line_number":85,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/email.cr#L85"},"def":{"name":"cc","args":[{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"      def cc : Array(Carbon::Address)\n        normalize(id_or_method(\n{{ value }}\n))\n      \nend\n    \n"}},{"html_id":"configure-macro","name":"configure","abstract":false,"location":{"filename":"src/carbon/email.cr","line_number":120,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/email.cr#L120"},"def":{"name":"configure","visibility":"Public","body":"    \n{% raise(\"Make #{@type.name} abstract in order to configure it.\") %}\n\n  \n"}},{"html_id":"from(value)-macro","name":"from","abstract":false,"args":[{"name":"value","external_name":"value","restriction":""}],"args_string":"(value)","args_html":"(value)","location":{"filename":"src/carbon/email.cr","line_number":73,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/email.cr#L73"},"def":{"name":"from","args":[{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"    def from : Carbon::Address\n      normalize(id_or_method(\n{{ value }}\n)).first\n    \nend\n  \n"}},{"html_id":"header(key,value)-macro","name":"header","abstract":false,"args":[{"name":"key","external_name":"key","restriction":""},{"name":"value","external_name":"value","restriction":""}],"args_string":"(key, value)","args_html":"(key, value)","location":{"filename":"src/carbon/email.cr","line_number":63,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/email.cr#L63"},"def":{"name":"header","args":[{"name":"key","external_name":"key","restriction":""},{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"    def headers : Hash(String, String)\n      \n{% if @type.methods.map(&.name).includes?((:headers).id) %}\n        previous_def\n      {% end %}\n\n      @headers[\n{{ key }}\n] = \n{{ value }}\n\n      @headers\n    \nend\n  \n"}},{"html_id":"id_or_method(value)-macro","name":"id_or_method","abstract":false,"args":[{"name":"value","external_name":"value","restriction":""}],"args_string":"(value)","args_html":"(value)","location":{"filename":"src/carbon/email.cr","line_number":93,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/email.cr#L93"},"def":{"name":"id_or_method","args":[{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"    \n{% if value.is_a?(SymbolLiteral) %}\n      {{ value.id }}\n    {% else %}\n      {{ value }}\n    {% end %}\n\n  \n"}},{"html_id":"reply_to(address)-macro","name":"reply_to","abstract":false,"args":[{"name":"address","external_name":"address","restriction":""}],"args_string":"(address)","args_html":"(address)","location":{"filename":"src/carbon/email.cr","line_number":59,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/email.cr#L59"},"def":{"name":"reply_to","args":[{"name":"address","external_name":"address","restriction":""}],"visibility":"Public","body":"    header \"Reply-To\", \n{{ address }}\n\n  \n"}},{"html_id":"subject(value)-macro","name":"subject","abstract":false,"args":[{"name":"value","external_name":"value","restriction":""}],"args_string":"(value)","args_html":"(value)","location":{"filename":"src/carbon/email.cr","line_number":79,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/email.cr#L79"},"def":{"name":"subject","args":[{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"    def subject : String\n      id_or_method(\n{{ value }}\n)\n    \nend\n  \n"}},{"html_id":"to(value)-macro","name":"to","abstract":false,"args":[{"name":"value","external_name":"value","restriction":""}],"args_string":"(value)","args_html":"(value)","location":{"filename":"src/carbon/email.cr","line_number":85,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/email.cr#L85"},"def":{"name":"to","args":[{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"      def to : Array(Carbon::Address)\n        normalize(id_or_method(\n{{ value }}\n))\n      \nend\n    \n"}}],"types":[{"html_id":"carbon/Carbon/Email/Recipients","path":"Carbon/Email/Recipients.html","kind":"alias","full_name":"Carbon::Email::Recipients","name":"Recipients","abstract":false,"locations":[{"filename":"src/carbon/email.cr","line_number":4,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/email.cr#L4"}],"repository_name":"carbon","program":false,"enum":false,"alias":true,"aliased":"(Array(Carbon::Emailable) | Carbon::Emailable)","aliased_html":"Array(<a href=\"../../Carbon/Emailable.html\">Carbon::Emailable</a>) | <a href=\"../../Carbon/Emailable.html\">Carbon::Emailable</a>","const":false,"namespace":{"html_id":"carbon/Carbon/Email","kind":"class","full_name":"Carbon::Email","name":"Email"}}]},{"html_id":"carbon/Carbon/Emailable","path":"Carbon/Emailable.html","kind":"module","full_name":"Carbon::Emailable","name":"Emailable","abstract":false,"locations":[{"filename":"src/carbon/emailable.cr","line_number":1,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/emailable.cr#L1"}],"repository_name":"carbon","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"carbon/Carbon/Address","kind":"class","full_name":"Carbon::Address","name":"Address"},{"html_id":"carbon/String","kind":"class","full_name":"String","name":"String"}],"namespace":{"html_id":"carbon/Carbon","kind":"module","full_name":"Carbon","name":"Carbon"},"instance_methods":[{"html_id":"carbon_address:Carbon::Address-instance-method","name":"carbon_address","doc":"Adapter's should use this to get the Carbon::Address","summary":"<p>Adapter's should use this to get the Carbon::Address</p>","abstract":false,"location":{"filename":"src/carbon/emailable.cr","line_number":5,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/emailable.cr#L5"},"def":{"name":"carbon_address","return_type":"Carbon::Address","visibility":"Public","body":"ensure_carbon_address(emailable)"}},{"html_id":"carbon_address_for_from:Carbon::Address-instance-method","name":"carbon_address_for_from","doc":"Adapter's should use this to get the Carbon::Address when used for 'from'","summary":"<p>Adapter's should use this to get the Carbon::Address when used for 'from'</p>","abstract":false,"location":{"filename":"src/carbon/emailable.cr","line_number":10,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/emailable.cr#L10"},"def":{"name":"carbon_address_for_from","return_type":"Carbon::Address","visibility":"Public","body":"ensure_carbon_address(emailable_for_from)"}}]},{"html_id":"carbon/Carbon/EmailTemplate","path":"Carbon/EmailTemplate.html","kind":"class","full_name":"Carbon::EmailTemplate","name":"EmailTemplate","abstract":false,"superclass":{"html_id":"carbon/Teeplate/FileTree","kind":"class","full_name":"Teeplate::FileTree","name":"FileTree"},"ancestors":[{"html_id":"carbon/Teeplate/FileTree","kind":"class","full_name":"Teeplate::FileTree","name":"FileTree"},{"html_id":"carbon/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"carbon/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/carbon/tasks/gen/email.cr","line_number":6,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/tasks/gen/email.cr#L6"}],"repository_name":"carbon","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"carbon/Carbon","kind":"module","full_name":"Carbon","name":"Carbon"},"constructors":[{"html_id":"new(email_filename:String,email_class_name:String)-class-method","name":"new","abstract":false,"args":[{"name":"email_filename","external_name":"email_filename","restriction":"String"},{"name":"email_class_name","external_name":"email_class_name","restriction":"String"}],"args_string":"(email_filename : String, email_class_name : String)","args_html":"(email_filename : <a href=\"../String.html\">String</a>, email_class_name : <a href=\"../String.html\">String</a>)","location":{"filename":"src/carbon/tasks/gen/email.cr","line_number":9,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/tasks/gen/email.cr#L9"},"def":{"name":"new","args":[{"name":"email_filename","external_name":"email_filename","restriction":"String"},{"name":"email_class_name","external_name":"email_class_name","restriction":"String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(email_filename, email_class_name)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"____collect_files(____files)-instance-method","name":"____collect_files","doc":":nodoc:","summary":"<p>:nodoc:</p>","abstract":false,"args":[{"name":"____files","external_name":"____files","restriction":""}],"args_string":"(____files)","args_html":"(____files)","location":{"filename":"src/carbon/tasks/gen/email.cr","line_number":7,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/tasks/gen/email.cr#L7"},"def":{"name":"____collect_files","args":[{"name":"____files","external_name":"____files","restriction":""}],"visibility":"Public","body":"io = IO::Memory.new\n__ecr0(io)\n____files << (::Teeplate::StringData.new(\"templates/#{@email_filename}_email/text.ecr\", io.to_s, File::Permissions.from_value(420)))\nio = IO::Memory.new\n__ecr2(io)\n____files << (::Teeplate::StringData.new(\"templates/#{@email_filename}_email/html.ecr\", io.to_s, File::Permissions.from_value(420)))\nio = IO::Memory.new\n__ecr4(io)\n____files << (::Teeplate::StringData.new(\"#{@email_filename}_email.cr\", io.to_s, File::Permissions.from_value(420)))\n"}},{"html_id":"__ecr0(____io)-instance-method","name":"__ecr0","abstract":false,"args":[{"name":"____io","external_name":"____io","restriction":""}],"args_string":"(____io)","args_html":"(____io)","location":{"filename":"src/carbon/tasks/gen/email.cr","line_number":7,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/tasks/gen/email.cr#L7"},"def":{"name":"__ecr0","args":[{"name":"____io","external_name":"____io","restriction":""}],"visibility":"Public","body":"::ECR.embed(\"/home/runner/work/carbon/carbon/src/carbon/tasks/gen/templates/templates/{{email_filename}}_email/text.ecr.ecr\", \"____io\")"}},{"html_id":"__ecr2(____io)-instance-method","name":"__ecr2","abstract":false,"args":[{"name":"____io","external_name":"____io","restriction":""}],"args_string":"(____io)","args_html":"(____io)","location":{"filename":"src/carbon/tasks/gen/email.cr","line_number":7,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/tasks/gen/email.cr#L7"},"def":{"name":"__ecr2","args":[{"name":"____io","external_name":"____io","restriction":""}],"visibility":"Public","body":"::ECR.embed(\"/home/runner/work/carbon/carbon/src/carbon/tasks/gen/templates/templates/{{email_filename}}_email/html.ecr.ecr\", \"____io\")"}},{"html_id":"__ecr4(____io)-instance-method","name":"__ecr4","abstract":false,"args":[{"name":"____io","external_name":"____io","restriction":""}],"args_string":"(____io)","args_html":"(____io)","location":{"filename":"src/carbon/tasks/gen/email.cr","line_number":7,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/tasks/gen/email.cr#L7"},"def":{"name":"__ecr4","args":[{"name":"____io","external_name":"____io","restriction":""}],"visibility":"Public","body":"::ECR.embed(\"/home/runner/work/carbon/carbon/src/carbon/tasks/gen/templates/{{email_filename}}_email.cr.ecr\", \"____io\")"}}]},{"html_id":"carbon/Carbon/Expectations","path":"Carbon/Expectations.html","kind":"module","full_name":"Carbon::Expectations","name":"Expectations","abstract":false,"locations":[{"filename":"src/carbon/expectations.cr","line_number":3,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/expectations.cr#L3"},{"filename":"src/carbon/expectations/be_delivered_expectation.cr","line_number":1,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/expectations/be_delivered_expectation.cr#L1"}],"repository_name":"carbon","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"carbon/Carbon","kind":"module","full_name":"Carbon","name":"Carbon"},"types":[{"html_id":"carbon/Carbon/Expectations/BeDeliveredExpectation","path":"Carbon/Expectations/BeDeliveredExpectation.html","kind":"struct","full_name":"Carbon::Expectations::BeDeliveredExpectation","name":"BeDeliveredExpectation","abstract":false,"superclass":{"html_id":"carbon/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"carbon/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"carbon/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"carbon/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/carbon/expectations/be_delivered_expectation.cr","line_number":1,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/expectations/be_delivered_expectation.cr#L1"}],"repository_name":"carbon","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"carbon/Carbon/Expectations","kind":"module","full_name":"Carbon::Expectations","name":"Expectations"},"constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/carbon/expectations/be_delivered_expectation.cr","line_number":1,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/expectations/be_delivered_expectation.cr#L1"},"def":{"name":"new","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"}}],"instance_methods":[{"html_id":"failure_message(email)-instance-method","name":"failure_message","abstract":false,"args":[{"name":"email","external_name":"email","restriction":""}],"args_string":"(email)","args_html":"(email)","location":{"filename":"src/carbon/expectations/be_delivered_expectation.cr","line_number":6,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/expectations/be_delivered_expectation.cr#L6"},"def":{"name":"failure_message","args":[{"name":"email","external_name":"email","restriction":""}],"visibility":"Public","body":"String.build do |message|\n  message << \"Expected: #{email} to be delivered\"\n  if Carbon::DevAdapter.delivered_emails.empty?\n    message << \", but no emails were delivered\"\n  else\n    message << \"\\n\\nTry this...\"\n    message << \"\\n\\n  ▸ See what emails were delivered with 'p Carbon::DevAdapter.delivered_emails'\"\n  end\nend"}},{"html_id":"initialize-instance-method","name":"initialize","abstract":false,"location":{"filename":"src/carbon/expectations/be_delivered_expectation.cr","line_number":1,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/expectations/be_delivered_expectation.cr#L1"},"def":{"name":"initialize","visibility":"Public","body":""}},{"html_id":"match(email:Carbon::Email):Bool-instance-method","name":"match","abstract":false,"args":[{"name":"email","external_name":"email","restriction":"Carbon::Email"}],"args_string":"(email : Carbon::Email) : Bool","args_html":"(email : <a href=\"../../Carbon/Email.html\">Carbon::Email</a>) : Bool","location":{"filename":"src/carbon/expectations/be_delivered_expectation.cr","line_number":2,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/expectations/be_delivered_expectation.cr#L2"},"def":{"name":"match","args":[{"name":"email","external_name":"email","restriction":"Carbon::Email"}],"return_type":"Bool","visibility":"Public","body":"Carbon::DevAdapter.delivered?(email)"}},{"html_id":"negative_failure_message(email)-instance-method","name":"negative_failure_message","abstract":false,"args":[{"name":"email","external_name":"email","restriction":""}],"args_string":"(email)","args_html":"(email)","location":{"filename":"src/carbon/expectations/be_delivered_expectation.cr","line_number":18,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/expectations/be_delivered_expectation.cr#L18"},"def":{"name":"negative_failure_message","args":[{"name":"email","external_name":"email","restriction":""}],"visibility":"Public","body":"\"Expected: #{email} not to be delivered\""}}]},{"html_id":"carbon/Carbon/Expectations/HaveDeliveredEmailsExpectation","path":"Carbon/Expectations/HaveDeliveredEmailsExpectation.html","kind":"class","full_name":"Carbon::Expectations::HaveDeliveredEmailsExpectation","name":"HaveDeliveredEmailsExpectation","abstract":false,"superclass":{"html_id":"carbon/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"carbon/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"carbon/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/carbon/expectations/have_delivered_emails_expectation.cr","line_number":1,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/expectations/have_delivered_emails_expectation.cr#L1"}],"repository_name":"carbon","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"carbon/Carbon/Expectations","kind":"module","full_name":"Carbon::Expectations","name":"Expectations"},"instance_methods":[{"html_id":"failure_message(_carbon:Carbon.class)-instance-method","name":"failure_message","abstract":false,"args":[{"name":"_carbon","external_name":"_carbon","restriction":"Carbon.class"}],"args_string":"(_carbon : Carbon.class)","args_html":"(_carbon : <span class=\"t\">Carbon</span>.<span class=\"k\">class</span>)","location":{"filename":"src/carbon/expectations/have_delivered_emails_expectation.cr","line_number":6,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/expectations/have_delivered_emails_expectation.cr#L6"},"def":{"name":"failure_message","args":[{"name":"_carbon","external_name":"_carbon","restriction":"Carbon.class"}],"visibility":"Public","body":"\"Expected: Carbon to have delivered emails, but found none\""}},{"html_id":"match(_carbon:Carbon.class):Bool-instance-method","name":"match","abstract":false,"args":[{"name":"_carbon","external_name":"_carbon","restriction":"Carbon.class"}],"args_string":"(_carbon : Carbon.class) : Bool","args_html":"(_carbon : <span class=\"t\">Carbon</span>.<span class=\"k\">class</span>) : Bool","location":{"filename":"src/carbon/expectations/have_delivered_emails_expectation.cr","line_number":2,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/expectations/have_delivered_emails_expectation.cr#L2"},"def":{"name":"match","args":[{"name":"_carbon","external_name":"_carbon","restriction":"Carbon.class"}],"return_type":"Bool","visibility":"Public","body":"!Carbon::DevAdapter.delivered_emails.empty?"}},{"html_id":"negative_failure_message(_carbon:Carbon.class)-instance-method","name":"negative_failure_message","abstract":false,"args":[{"name":"_carbon","external_name":"_carbon","restriction":"Carbon.class"}],"args_string":"(_carbon : Carbon.class)","args_html":"(_carbon : <span class=\"t\">Carbon</span>.<span class=\"k\">class</span>)","location":{"filename":"src/carbon/expectations/have_delivered_emails_expectation.cr","line_number":10,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/expectations/have_delivered_emails_expectation.cr#L10"},"def":{"name":"negative_failure_message","args":[{"name":"_carbon","external_name":"_carbon","restriction":"Carbon.class"}],"visibility":"Public","body":"\"Expected: Carbon to have no delivered emails, but found some\""}}]}]},{"html_id":"carbon/Carbon/SpawnStrategy","path":"Carbon/SpawnStrategy.html","kind":"class","full_name":"Carbon::SpawnStrategy","name":"SpawnStrategy","abstract":false,"superclass":{"html_id":"carbon/Carbon/DeliverLaterStrategy","kind":"class","full_name":"Carbon::DeliverLaterStrategy","name":"DeliverLaterStrategy"},"ancestors":[{"html_id":"carbon/Carbon/DeliverLaterStrategy","kind":"class","full_name":"Carbon::DeliverLaterStrategy","name":"DeliverLaterStrategy"},{"html_id":"carbon/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"carbon/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/carbon/spawn_strategy.cr","line_number":1,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/spawn_strategy.cr#L1"}],"repository_name":"carbon","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"carbon/Carbon","kind":"module","full_name":"Carbon","name":"Carbon"},"instance_methods":[{"html_id":"run(email,&block)-instance-method","name":"run","abstract":false,"args":[{"name":"email","external_name":"email","restriction":""}],"args_string":"(email, &block)","args_html":"(email, &block)","location":{"filename":"src/carbon/spawn_strategy.cr","line_number":2,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/spawn_strategy.cr#L2"},"def":{"name":"run","args":[{"name":"email","external_name":"email","restriction":""}],"yields":0,"block_arg":{"name":"block","external_name":"block","restriction":""},"visibility":"Public","body":"spawn do\n  block.call\nend"}}]}]},{"html_id":"carbon/Gen","path":"Gen.html","kind":"module","full_name":"Gen","name":"Gen","abstract":false,"locations":[{"filename":"src/carbon/tasks/gen/email.cr","line_number":16,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/tasks/gen/email.cr#L16"}],"repository_name":"carbon","program":false,"enum":false,"alias":false,"const":false,"types":[{"html_id":"carbon/Gen/Email","path":"Gen/Email.html","kind":"class","full_name":"Gen::Email","name":"Email","abstract":false,"superclass":{"html_id":"carbon/LuckyTask/Task","kind":"class","full_name":"LuckyTask::Task","name":"Task"},"ancestors":[{"html_id":"carbon/LuckyTask/TextHelpers","kind":"module","full_name":"LuckyTask::TextHelpers","name":"TextHelpers"},{"html_id":"carbon/LuckyTask/Task","kind":"class","full_name":"LuckyTask::Task","name":"Task"},{"html_id":"carbon/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"carbon/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/carbon/tasks/gen/email.cr","line_number":16,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/tasks/gen/email.cr#L16"}],"repository_name":"carbon","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"PARSER_OPTS","name":"PARSER_OPTS","value":"[:email_name] of Symbol"}],"included_modules":[{"html_id":"carbon/LuckyTask/TextHelpers","kind":"module","full_name":"LuckyTask::TextHelpers","name":"TextHelpers"}],"namespace":{"html_id":"carbon/Gen","kind":"module","full_name":"Gen","name":"Gen"},"instance_methods":[{"html_id":"call-instance-method","name":"call","abstract":false,"location":{"filename":"src/carbon/tasks/gen/email.cr","line_number":33,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/tasks/gen/email.cr#L33"},"def":{"name":"call","visibility":"Public","body":"template = Carbon::EmailTemplate.new(filename, email_name)\ntemplate.render(output_path.to_s)\ndisplay_success_messages\n"}},{"html_id":"email_name:String-instance-method","name":"email_name","abstract":false,"location":{"filename":"src/carbon/tasks/gen/email.cr","line_number":20,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/tasks/gen/email.cr#L20"},"def":{"name":"email_name","return_type":"String","visibility":"Public","body":"if @email_name.nil?\n  raise(\"email_name is required, but no value was passed.\")\nend\n@email_name.not_nil!\n"}},{"html_id":"help_message-instance-method","name":"help_message","abstract":false,"location":{"filename":"src/carbon/tasks/gen/email.cr","line_number":22,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/tasks/gen/email.cr#L22"},"def":{"name":"help_message","visibility":"Public","body":"\"Generate a new email with html and text formats.\\nThe email name must be CamelCase. No other options are available.\\nExamples:\\n  lucky gen.email WelcomeUser\\n  lucky gen.email SubscriptionRenewed\\n  lucky gen.email ResetPassword\""}},{"html_id":"name-instance-method","name":"name","abstract":false,"location":{"filename":"src/carbon/tasks/gen/email.cr","line_number":16,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/tasks/gen/email.cr#L16"},"def":{"name":"name","visibility":"Public","body":"\"gen.email\""}},{"html_id":"option_parser:OptionParser-instance-method","name":"option_parser","abstract":false,"def":{"name":"option_parser","return_type":"OptionParser","visibility":"Public","body":"@option_parser"}},{"html_id":"option_parser=(option_parser:OptionParser)-instance-method","name":"option_parser=","abstract":false,"args":[{"name":"option_parser","external_name":"option_parser","restriction":"OptionParser"}],"args_string":"(option_parser : OptionParser)","args_html":"(option_parser : OptionParser)","def":{"name":"option_parser=","args":[{"name":"option_parser","external_name":"option_parser","restriction":"OptionParser"}],"visibility":"Public","body":"@option_parser = option_parser"}},{"html_id":"output:IO-instance-method","name":"output","abstract":false,"def":{"name":"output","return_type":"IO","visibility":"Public","body":"@output"}},{"html_id":"output=(output:IO)-instance-method","name":"output=","abstract":false,"args":[{"name":"output","external_name":"output","restriction":"IO"}],"args_string":"(output : IO)","args_html":"(output : IO)","def":{"name":"output=","args":[{"name":"output","external_name":"output","restriction":"IO"}],"visibility":"Public","body":"@output = output"}},{"html_id":"print_help_or_call(args:Array(String))-instance-method","name":"print_help_or_call","abstract":false,"args":[{"name":"args","external_name":"args","restriction":"Array(String)"}],"args_string":"(args : Array(String))","args_html":"(args : Array(<a href=\"../String.html\">String</a>))","location":{"filename":"src/carbon/tasks/gen/email.cr","line_number":16,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/tasks/gen/email.cr#L16"},"def":{"name":"print_help_or_call","args":[{"name":"args","external_name":"args","restriction":"Array(String)"}],"visibility":"Public","body":"if wants_help_message?(args)\n  output.puts(help_message)\nelse\n  {% for opt in @type.constant(:PARSER_OPTS) %}\n        set_opt_for_{{ opt.id }}(args)\n        {% end %}\n  option_parser.parse(args)\n  call\nend"}},{"html_id":"set_opt_for_email_name(args:Array(String))-instance-method","name":"set_opt_for_email_name","abstract":false,"args":[{"name":"args","external_name":"args","restriction":"Array(String)"}],"args_string":"(args : Array(String))","args_html":"(args : Array(<a href=\"../String.html\">String</a>))","location":{"filename":"src/carbon/tasks/gen/email.cr","line_number":20,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/tasks/gen/email.cr#L20"},"def":{"name":"set_opt_for_email_name","args":[{"name":"args","external_name":"args","restriction":"Array(String)"}],"visibility":"Public","body":"value = args[@positional_arg_count]?\nmatches = value.is_a?(Array) ? value.all?(&.=~(/^[A-Z]/)) : value =~ (/^[A-Z]/)\nif !matches\n  raise(\"Invalid format for email_name. It should match /^[A-Z]/\\n\\n\")\nend\n@email_name = value\n@positional_arg_count = @positional_arg_count + 1\n"}},{"html_id":"summary-instance-method","name":"summary","abstract":false,"location":{"filename":"src/carbon/tasks/gen/email.cr","line_number":18,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/tasks/gen/email.cr#L18"},"def":{"name":"summary","visibility":"Public","body":"\"Generate a new Email\""}}]}]},{"html_id":"carbon/String","path":"String.html","kind":"class","full_name":"String","name":"String","abstract":false,"superclass":{"html_id":"carbon/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"carbon/Carbon/Emailable","kind":"module","full_name":"Carbon::Emailable","name":"Emailable"},{"html_id":"carbon/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"carbon/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"carbon/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/carbon/string_extensions.cr","line_number":3,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/string_extensions.cr#L3"}],"repository_name":"carbon","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"carbon/Carbon/Emailable","kind":"module","full_name":"Carbon::Emailable","name":"Emailable"},{"html_id":"carbon/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"}],"doc":"A `String` represents an immutable sequence of UTF-8 characters.\n\nA `String` is typically created with a string literal, enclosing UTF-8 characters\nin double quotes:\n\n```\n\"hello world\"\n```\n\nSee [`String` literals](https://crystal-lang.org/reference/syntax_and_semantics/literals/string.html) in the language reference.\n\nA backslash can be used to denote some characters inside the string:\n\n```\n\"\\\"\" # double quote\n\"\\\\\" # backslash\n\"\\e\" # escape\n\"\\f\" # form feed\n\"\\n\" # newline\n\"\\r\" # carriage return\n\"\\t\" # tab\n\"\\v\" # vertical tab\n```\n\nYou can use a backslash followed by an *u* and four hexadecimal characters to denote a unicode codepoint written:\n\n```\n\"\\u0041\" # == \"A\"\n```\n\nOr you can use curly braces and specify up to six hexadecimal numbers (0 to 10FFFF):\n\n```\n\"\\u{41}\" # == \"A\"\n```\n\nA string can span multiple lines:\n\n```\n\"hello\n      world\" # same as \"hello\\n      world\"\n```\n\nNote that in the above example trailing and leading spaces, as well as newlines,\nend up in the resulting string. To avoid this, you can split a string into multiple lines\nby joining multiple literals with a backslash:\n\n```\n\"hello \" \\\n\"world, \" \\\n\"no newlines\" # same as \"hello world, no newlines\"\n```\n\nAlternatively, a backslash followed by a newline can be inserted inside the string literal:\n\n```\n\"hello \\\n     world, \\\n     no newlines\" # same as \"hello world, no newlines\"\n```\n\nIn this case, leading whitespace is not included in the resulting string.\n\nIf you need to write a string that has many double quotes, parentheses, or similar\ncharacters, you can use alternative literals:\n\n```\n# Supports double quotes and nested parentheses\n%(hello (\"world\")) # same as \"hello (\\\"world\\\")\"\n\n# Supports double quotes and nested brackets\n%[hello [\"world\"]] # same as \"hello [\\\"world\\\"]\"\n\n# Supports double quotes and nested curlies\n%{hello {\"world\"}} # same as \"hello {\\\"world\\\"}\"\n\n# Supports double quotes and nested angles\n%<hello <\"world\">> # same as \"hello <\\\"world\\\">\"\n```\n\nTo create a `String` with embedded expressions, you can use string interpolation:\n\n```\na = 1\nb = 2\n\"sum = #{a + b}\" # \"sum = 3\"\n```\n\nThis ends up invoking `Object#to_s(IO)` on each expression enclosed by `#{...}`.\n\nIf you need to dynamically build a string, use `String#build` or `IO::Memory`.\n\n### Non UTF-8 valid strings\n\nString might end up being conformed of bytes which are an invalid\nbyte sequence according to UTF-8. This can happen if the string is created\nvia one of the constructors that accept bytes, or when getting a string\nfrom `String.build` or `IO::Memory`. No exception will be raised, but\ninvalid byte sequences, when asked as chars, will use the unicode replacement\nchar (value 0xFFFD). For example:\n\n```\n# here 255 is not a valid byte value in the UTF-8 encoding\nstring = String.new(Bytes[255, 97])\nstring.valid_encoding? # => false\n\n# The first char here is the unicode replacement char\nstring.chars # => ['�', 'a']\n```\n\nOne can also create strings with specific byte value in them by\nusing octal and hexadecimal escape sequences:\n\n```\n# Octal escape sequences\n\"\\101\" # # => \"A\"\n\"\\12\"  # # => \"\\n\"\n\"\\1\"   # string with one character with code point 1\n\"\\377\" # string with one byte with value 255\n\n# Hexadecimal escape sequences\n\"\\x41\" # # => \"A\"\n\"\\xFF\" # string with one byte with value 255\n```\n\nThe reason for allowing strings that don't have a valid UTF-8 sequence\nis that the world is full of content that isn't properly encoded,\nand having a program raise an exception or stop because of this\nis not good. It's better if programs are more resilient, but\nshow a replacement character when there's an error in incoming data.","summary":"<p>A <code><a href=\"String.html\">String</a></code> represents an immutable sequence of UTF-8 characters.</p>","instance_methods":[{"html_id":"emailable:Carbon::Address-instance-method","name":"emailable","abstract":false,"location":{"filename":"src/carbon/string_extensions.cr","line_number":6,"url":"https://github.com/luckyframework/carbon/blob/a77ff3c06288257ff57136725e2bae6af2e8d797/src/carbon/string_extensions.cr#L6"},"def":{"name":"emailable","return_type":"Carbon::Address","visibility":"Public","body":"Carbon::Address.new(address: self)"}}]}]}})